version: "3.9"

networks:
  db_net:
    name: backend_net
    driver: bridge
  monitoring_net:
    name: monitoring_net
    driver: bridge
  frontend_net:
    name: frontend_net
    driver: bridge

volumes:
  postgres_data:
  pgadmin-data:
  grafana-data:
  prometheus-data:

services:
  db:
    image: postgres:17-alpine
    env_file:
      - db.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - db_net

  django:
    build: .
    env_file:
      - web.env
      - db.env
    command: >
      sh -c "python /code/manage.py makemigrations &&
             python /code/manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 core.wsgi:application"
    volumes:
      - .:/code
    expose:
      - 8000
    ports:
      - "8000:8000"
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`django.localhost`)"
      - "traefik.http.routers.django.entrypoints=web"
      - "traefik.http.services.django.loadbalancer.server.port=8000"
      - "traefik.docker.network=frontend_net"
    networks:
      - frontend_net
      - db_net
      - monitoring_net

  pgadmin:
    image: dpage/pgadmin4:latest
    env_file:
      - db.env
    restart: always
    # If you don't want pgAdmin publicly reachable,
    # you can just expose or remove ports entirely
    # but here we do an example with local port:
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - db_net

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - django
    networks:
      - monitoring_net

  postgres_exporter:
    image: wrouesnel/postgres_exporter:latest
    env_file:
      - db.env
    ports:
      - "9187:9187"
    depends_on:
      - db
    # Needs access to db (backend) and also
    # be reachable by Prometheus (monitoring)
    networks:
      - db_net
      - monitoring_net

  grafana:
    image: grafana/grafana:latest
    env_file:
      - web.env
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring_net

  traefik:
    image: traefik:v2.9.6
    ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - "$PWD/traefik.dev.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - frontend_net
